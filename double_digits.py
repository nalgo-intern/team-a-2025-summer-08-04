# -*- coding: utf-8 -*-
"""double_digits.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15rcY-scv6QCp2njaJH7urmfjNDonHzIx
"""

from tensorflow.keras.datasets import mnist
import numpy as np
from scipy.ndimage import zoom

def make_double_images(images, labels, num_samples):
    double_images = []
    double_labels = []

    for _ in range(num_samples):
        idx = np.random.randint(0, len(images))

        img = images[idx]

        resized = zoom(img, (1.0, 0.5))              # 横を0.5倍にして28x14に
        resized = resized / 255.0                         # 正規化

        double_images.append(resized)
        double_labels.append(labels[idx])

    return np.array(double_images), np.array(double_labels)

def load_double_data(num_train_samples=40000, num_test_samples=10000):
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    x_train, y_train = make_double_images(x_train, y_train, num_train_samples)
    x_test, y_test = make_double_images(x_test, y_test, num_test_samples)

    return (x_train, y_train), (x_test, y_test)

from PIL import Image
import base64
import io

def preprocess_image(base64_str):
    """
    base64形式の画像を受け取り、28x28のグレースケール画像に変換して
    モデルに渡せるNumPy配列にして返す。
    """
    # base64文字列のうち、"data:image/png;base64,..." の部分をカット
    base64_data = base64_str.split(',')[1]

    # base64をバイナリにデコード
    image_data = base64.b64decode(base64_data)

    # PILで画像読み込み（グレースケール）→ リサイズ
    image = Image.open(io.BytesIO(image_data)).convert('L')  # 'L'はグレースケール
    image = image.resize((28, 28))  # モデルが28x28を期待している場合

    # 画像をNumPy配列に変換（値を0～1に正規化）
    image_array = np.array(image)
    image_array = image_array / 255.0
    image_array = image_array.reshape(1, 28, 28, 1)  # CNN用に形を整える

    return image_array